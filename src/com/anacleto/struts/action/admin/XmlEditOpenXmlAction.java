/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.anacleto.struts.action.admin;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.Exception;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.anacleto.base.Configuration;
import com.anacleto.struts.form.admin.XmlEditOpenXmlForm;

/** 
 * MyEclipse Struts
 * Creation date: 12-27-2006
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class XmlEditOpenXmlAction extends Action {
	/*
	 * Generated Methods
	 */
	
	private static int BUFFER_SIZE = 1024;

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		XmlEditOpenXmlForm openXmlForm = (XmlEditOpenXmlForm) form;
		
		String dirName = Configuration.params.getConfigDir();
		// String dirName = "c:\\doku\\tesuji\\fejlesztes\\xml\\";
		File inFile = new File(dirName + "/" + openXmlForm.getFile());
		String content = readContent(inFile, "utf-8");
		openXmlForm.setContent(content);
	    // return mapping.findForward("success");
	    return mapping.getInputForward();
	}

    private String readContent(File inFile, String encoding) {
    	
    	StringBuffer sb = new StringBuffer();
    	InputStreamReader in = null;
    	InputStream file = null;
    	try{
	        file = new FileInputStream(inFile);
	        BufferedInputStream is = new BufferedInputStream(file);
	        
	        if (encoding != null)
				try {
					in = new InputStreamReader(is, encoding);
				} catch (Exception e) {
					in = new InputStreamReader(is);
				}
			else
	        	in = new InputStreamReader(is);
	        
	        char buffer[] = new char[BUFFER_SIZE];
	        int n = 0;
	        while (true) {
	            n = in.read(buffer);
	
	            if (n < 1)
	                break;
	            sb.append(buffer, 0, n);
	        }
    	} catch (FileNotFoundException e) {
			// throw new Exception(e);
		} catch (IOException e) {
			// throw new Exception(e);
		} finally {
			if (file != null)
	    		try {
					file.close();
				} catch (IOException e) {
					// throw new Exception(e);
				}
				
    	    if (in != null)
				try {
					in.close();
				} catch (IOException e) {
					// throw new Exception(e);
				}
    	}
    	
    	return sb.toString();
    }

}